{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\src\\\\content\\\\TrunkContent.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport EmptyState from '../layout/EmptyState/EmptyState';\nimport Button from '@material-ui/core/Button'; // import AddTrunkDialog from '../../dialogs/AddTrunkDialog/AddTrunkDialog';\n// import TrunksView from '../../layout/TrunksView';\n// import TrunkCard from '../../layout/TrunkCard';\n\nimport ReactDataGrid from 'react-data-grid';\n\nvar styles = function styles(theme) {\n  return {\n    emptyStateIcon: {\n      fontSize: theme.spacing(12)\n    },\n    button: {\n      marginTop: theme.spacing(1)\n    },\n    buttonIcon: {\n      marginRight: theme.spacing(1)\n    },\n    buttonTop: {\n      marginTop: 0\n    }\n  };\n};\n\nvar TrunkContent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TrunkContent, _Component);\n\n  function TrunkContent(props) {\n    var _this;\n\n    _classCallCheck(this, TrunkContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrunkContent).call(this, props));\n\n    _this.addItem = function (event) {\n      var postData = _this.props.trunk;\n      postData.items = [\"my item\"];\n      var updates = {};\n      updates['trunks/' + postData.key] = postData;\n      global.firebaseApp.database().ref().update(updates, function (error) {\n        if (error) {\n          console.log(error);\n        } else {\n          console.log(\"Success\");\n        }\n      });\n    };\n\n    _this.state = {\n      items: []\n    };\n    return _this;\n  }\n\n  _createClass(TrunkContent, [{\n    key: \"render\",\n    //   updateTrunkStatus = (event) => {  \n    //     var postData = this.props.trunk;\n    //     postData.status = event.target.value;\n    //     var updates = {};\n    //     updates['trunks/' + postData.key] = postData;\n    //     global.firebaseApp.database().ref().update(updates, \n    //         function(error) {\n    //             if (error) {\n    //                 console.log(error)\n    //             } else {\n    //                 console.log(\"Success\")\n    //             }\n    //         }\n    //     );\n    // }\n    value: function render() {\n      // Styling\n      var classes = this.props.classes; // Properties\n\n      var _this$props = this.props,\n          isSignedIn = _this$props.isSignedIn,\n          title = _this$props.title,\n          trunk = _this$props.trunk;\n      var columns = [// { key: 'id', name: 'ID' },\n      {\n        key: 'title',\n        name: 'Title'\n      }, {\n        key: 'count',\n        name: 'Count'\n      }];\n      var rows = [{\n        id: 0,\n        title: 'row1',\n        count: 20\n      }, {\n        id: 1,\n        title: 'row1',\n        count: 40\n      }, {\n        id: 2,\n        title: 'row1',\n        count: 60\n      }];\n\n      if (isSignedIn) {\n        return React.createElement(ReactDataGrid, {\n          columns: columns,\n          rowGetter: function rowGetter(i) {\n            return rows[i];\n          },\n          rowsCount: 3,\n          minHeight: 150,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(EmptyState, {\n          title: title,\n          description: \"Sign up or sign in to edit this trunk\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        });\n      }\n    }\n  }]);\n\n  return TrunkContent;\n}(Component);\n\nTrunkContent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  isSignedIn: PropTypes.bool.isRequired,\n  title: PropTypes.string,\n  trunk: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(TrunkContent);","map":{"version":3,"sources":["C:\\Users\\xlind\\Documents\\ASUFootballEquipment\\app\\src\\content\\TrunkContent.js"],"names":["React","Component","PropTypes","withStyles","Fab","EmptyState","Button","ReactDataGrid","styles","theme","emptyStateIcon","fontSize","spacing","button","marginTop","buttonIcon","marginRight","buttonTop","TrunkContent","props","addItem","event","postData","trunk","items","updates","key","global","firebaseApp","database","ref","update","error","console","log","state","classes","isSignedIn","title","columns","name","rows","id","count","i","propTypes","object","isRequired","bool","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport EmptyState from '../layout/EmptyState/EmptyState';\r\nimport Button from '@material-ui/core/Button';\r\n \r\n// import AddTrunkDialog from '../../dialogs/AddTrunkDialog/AddTrunkDialog';\r\n// import TrunksView from '../../layout/TrunksView';\r\n// import TrunkCard from '../../layout/TrunkCard';\r\n\r\n\r\nimport ReactDataGrid from 'react-data-grid';\r\n\r\n\r\nconst styles = (theme) => ({\r\n  emptyStateIcon: {\r\n    fontSize: theme.spacing(12)\r\n  },\r\n\r\n  button: {\r\n    marginTop: theme.spacing(1)\r\n  },\r\n\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1)\r\n  },\r\n\r\n  buttonTop: {\r\n    marginTop: 0\r\n  },\r\n});\r\n\r\n\r\n\r\nclass TrunkContent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      items: []\r\n    };\r\n  }\r\n\r\n\r\n\r\n  addItem = (event) => {  \r\n    var postData = this.props.trunk;\r\n    postData.items = [\"my item\"];\r\n    \r\n    var updates = {};\r\n    updates['trunks/' + postData.key] = postData;\r\n\r\n    global.firebaseApp.database().ref().update(updates, \r\n        function(error) {\r\n            if (error) {\r\n                console.log(error)\r\n            } else {\r\n                console.log(\"Success\")\r\n            }\r\n        }\r\n    );\r\n  }\r\n\r\n\r\n//   updateTrunkStatus = (event) => {  \r\n//     var postData = this.props.trunk;\r\n//     postData.status = event.target.value;\r\n    \r\n//     var updates = {};\r\n//     updates['trunks/' + postData.key] = postData;\r\n\r\n//     global.firebaseApp.database().ref().update(updates, \r\n//         function(error) {\r\n//             if (error) {\r\n//                 console.log(error)\r\n//             } else {\r\n//                 console.log(\"Success\")\r\n//             }\r\n//         }\r\n//     );\r\n// }\r\n\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    // Properties\r\n    const { isSignedIn, title, trunk} = this.props;\r\n    \r\n    \r\n    const columns = [\r\n    // { key: 'id', name: 'ID' },\r\n    { key: 'title', name: 'Title' },\r\n    { key: 'count', name: 'Count' } ];\r\n  \r\n    const rows = [{id: 0, title: 'row1', count: 20}, {id: 1, title: 'row1', count: 40}, {id: 2, title: 'row1', count: 60}];\r\n\r\n  \r\n    if (isSignedIn) {\r\n        return (<ReactDataGrid\r\n            columns={columns}\r\n            rowGetter={i => rows[i]}\r\n            rowsCount={3}\r\n            minHeight={150} />\r\n        );\r\n    } else {\r\n        return (\r\n        <EmptyState\r\n            title={title}\r\n            description=\"Sign up or sign in to edit this trunk\"\r\n        />\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nTrunkContent.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  isSignedIn: PropTypes.bool.isRequired,\r\n  title: PropTypes.string,\r\n  trunk: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(TrunkContent);"]},"metadata":{},"sourceType":"module"}