{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\src\\\\content\\\\TrunkContent.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport EmptyState from '../layout/EmptyState/EmptyState';\nimport Button from '@material-ui/core/Button'; // import AddTrunkDialog from '../../dialogs/AddTrunkDialog/AddTrunkDialog';\n// import TrunksView from '../../layout/TrunksView';\n// import TrunkCard from '../../layout/TrunkCard';\n\nimport ReactDataGrid from 'react-data-grid';\n\nvar styles = function styles(theme) {\n  return {\n    emptyStateIcon: {\n      fontSize: theme.spacing(12)\n    },\n    button: {\n      marginTop: theme.spacing(1)\n    },\n    buttonIcon: {\n      marginRight: theme.spacing(1)\n    },\n    buttonTop: {\n      marginTop: 0\n    }\n  };\n};\n\nvar TrunkContent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TrunkContent, _Component);\n\n  function TrunkContent(props) {\n    var _this;\n\n    _classCallCheck(this, TrunkContent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrunkContent).call(this, props));\n\n    _this.addItem = function (event) {\n      var postData = _this.props.trunk;\n\n      if (postData.items == undefined) {\n        postData.items = [];\n      }\n\n      postData.items.push({\n        name: \"item name\",\n        quantity: 10\n      });\n      var updates = {};\n      updates['trunks/' + postData.key] = postData;\n      global.firebaseApp.database().ref().update(updates, function (error) {\n        if (error) {\n          console.log(error);\n        } else {\n          console.log(\"Success\");\n        }\n      });\n    };\n\n    _this.onGridRowsUpdated = function (_ref) {\n      var fromRow = _ref.fromRow,\n          toRow = _ref.toRow,\n          updated = _ref.updated;\n\n      _this.setState(function (state) {\n        var rows = state.rows.slice();\n\n        for (var i = fromRow; i <= toRow; i++) {\n          rows[i] = _objectSpread({}, rows[i], updated);\n        }\n\n        return {\n          rows: rows\n        };\n      });\n    };\n\n    _this.state = {\n      rows: null\n    };\n    return _this;\n  }\n\n  _createClass(TrunkContent, [{\n    key: \"render\",\n    value: function render() {\n      // Styling\n      var classes = this.props.classes; // Properties\n\n      var _this$props = this.props,\n          isSignedIn = _this$props.isSignedIn,\n          title = _this$props.title,\n          trunk = _this$props.trunk;\n      var columns = [// { key: 'id', name: 'ID' },\n      {\n        key: 'item',\n        name: 'Item',\n        editable: true\n      }, {\n        key: 'quantity',\n        name: 'Quantity',\n        editable: true\n      }];\n      var rows = this.props.trunk.items.map(function (item) {\n        return {\n          id: item.name,\n          item: item.name,\n          quantity: item.quantity\n        };\n      });\n\n      if (isSignedIn) {\n        // return (<Button onClick={this.addItem}>add</Button>);\n        return React.createElement(ReactDataGrid, {\n          columns: columns,\n          rowGetter: function rowGetter(i) {\n            return rows[i];\n          },\n          rowsCount: 3,\n          minHeight: 150,\n          onGridRowsUpdated: this.onGridRowsUpdated,\n          enableCellSelect: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(EmptyState, {\n          title: title,\n          description: \"Sign up or sign in to edit this trunk\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        });\n      }\n    }\n  }]);\n\n  return TrunkContent;\n}(Component);\n\nTrunkContent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  isSignedIn: PropTypes.bool.isRequired,\n  title: PropTypes.string,\n  trunk: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(TrunkContent);","map":{"version":3,"sources":["C:\\Users\\xlind\\Documents\\ASUFootballEquipment\\app\\src\\content\\TrunkContent.js"],"names":["React","Component","PropTypes","withStyles","Fab","EmptyState","Button","ReactDataGrid","styles","theme","emptyStateIcon","fontSize","spacing","button","marginTop","buttonIcon","marginRight","buttonTop","TrunkContent","props","addItem","event","postData","trunk","items","undefined","push","name","quantity","updates","key","global","firebaseApp","database","ref","update","error","console","log","onGridRowsUpdated","fromRow","toRow","updated","setState","state","rows","slice","i","classes","isSignedIn","title","columns","editable","map","item","id","propTypes","object","isRequired","bool","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport EmptyState from '../layout/EmptyState/EmptyState';\r\nimport Button from '@material-ui/core/Button';\r\n \r\n// import AddTrunkDialog from '../../dialogs/AddTrunkDialog/AddTrunkDialog';\r\n// import TrunksView from '../../layout/TrunksView';\r\n// import TrunkCard from '../../layout/TrunkCard';\r\n\r\n\r\nimport ReactDataGrid from 'react-data-grid';\r\n\r\n\r\nconst styles = (theme) => ({\r\n  emptyStateIcon: {\r\n    fontSize: theme.spacing(12)\r\n  },\r\n\r\n  button: {\r\n    marginTop: theme.spacing(1)\r\n  },\r\n\r\n  buttonIcon: {\r\n    marginRight: theme.spacing(1)\r\n  },\r\n\r\n  buttonTop: {\r\n    marginTop: 0\r\n  },\r\n});\r\n\r\n\r\n\r\nclass TrunkContent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { rows: null };\r\n\r\n  }\r\n\r\n\r\n\r\n  addItem = (event) => {  \r\n    var postData = this.props.trunk;\r\n    if (postData.items == undefined) {\r\n      postData.items = []\r\n    }\r\n    postData.items.push({name: \"item name\", quantity: 10});\r\n    \r\n    var updates = {};\r\n    updates['trunks/' + postData.key] = postData;\r\n\r\n    global.firebaseApp.database().ref().update(updates, \r\n        function(error) {\r\n            if (error) {\r\n                console.log(error)\r\n            } else {\r\n                console.log(\"Success\")\r\n            }\r\n        }\r\n    );\r\n  }\r\n\r\n  onGridRowsUpdated = ({ fromRow, toRow, updated }) => {\r\n    this.setState(state => {\r\n      const rows = state.rows.slice();\r\n      for (let i = fromRow; i <= toRow; i++) {\r\n        rows[i] = { ...rows[i], ...updated };\r\n      }\r\n      return { rows };\r\n    });\r\n  };\r\n\r\n\r\n  render() {\r\n    // Styling\r\n    const { classes } = this.props;\r\n\r\n    // Properties\r\n    const { isSignedIn, title, trunk} = this.props;\r\n    \r\n    \r\n    const columns = [\r\n    // { key: 'id', name: 'ID' },\r\n    { key: 'item', name: 'Item', editable: true},\r\n    { key: 'quantity', name: 'Quantity', editable: true} \r\n    ];\r\n    \r\n\r\n    var rows = this.props.trunk.items.map(function (item) {\r\n      return {id: item.name, item: item.name, quantity: item.quantity}\r\n    });\r\n\r\n    if (isSignedIn) {\r\n          // return (<Button onClick={this.addItem}>add</Button>);\r\n        return (\r\n        <ReactDataGrid\r\n            columns={columns}\r\n            rowGetter={i => rows[i]}\r\n            rowsCount={3}\r\n            minHeight={150} \r\n            onGridRowsUpdated={this.onGridRowsUpdated}\r\n            enableCellSelect={true}\r\n          />\r\n        );\r\n    } else {\r\n        return (\r\n        <EmptyState\r\n            title={title}\r\n            description=\"Sign up or sign in to edit this trunk\"\r\n        />\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nTrunkContent.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  isSignedIn: PropTypes.bool.isRequired,\r\n  title: PropTypes.string,\r\n  trunk: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(TrunkContent);"]},"metadata":{},"sourceType":"module"}