{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\xlind\\\\Documents\\\\ASUFootballEquipment\\\\app\\\\src\\\\dialogs\\\\SettingsDialog\\\\SettingsDialog.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Button from '@material-ui/core/Button';\nimport Hidden from '@material-ui/core/Hidden';\nimport SwipeableViews from 'react-swipeable-views';\nimport AccountTab from '../../tabs/settings/AccountTab/AccountTab';\nimport AppearanceTab from '../../tabs/settings/AppearanceTab/AppearanceTab';\n\nvar styles = function styles(theme) {\n  return {\n    tabs: {\n      marginBottom: theme.spacing(1)\n    }\n  };\n};\n\nvar SettingsDialog =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SettingsDialog, _Component);\n\n  function SettingsDialog(props) {\n    var _this;\n\n    _classCallCheck(this, SettingsDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SettingsDialog).call(this, props));\n\n    _this.handleKeyPress = function (event) {\n      var key = event.key;\n\n      if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n        return;\n      }\n\n      if (key === 'Enter') {\n        _this.props.onClose();\n      }\n    };\n\n    _this.changeTab = function (event, value) {\n      _this.setState({\n        selectedTab: value\n      });\n    };\n\n    _this.changeIndex = function (index) {\n      _this.setState({\n        selectedTab: index\n      });\n    };\n\n    _this.handleResetClick = function () {\n      var _this$props = _this.props,\n          primaryColor = _this$props.primaryColor,\n          secondaryColor = _this$props.secondaryColor,\n          type = _this$props.type,\n          defaultTheme = _this$props.defaultTheme;\n\n      if (primaryColor !== defaultTheme.primaryColor || secondaryColor !== defaultTheme.secondaryColor || type !== defaultTheme.type) {\n        setTimeout(_this.props.onResetClick, 137.5);\n      }\n    };\n\n    _this.state = {\n      selectedTab: 0\n    };\n    return _this;\n  }\n\n  _createClass(SettingsDialog, [{\n    key: \"render\",\n    value: function render() {\n      // Styling\n      var classes = this.props.classes; // Properties\n\n      var _this$props2 = this.props,\n          fullScreen = _this$props2.fullScreen,\n          open = _this$props2.open,\n          user = _this$props2.user,\n          isPerformingAuthAction = _this$props2.isPerformingAuthAction,\n          isVerifyingEmailAddress = _this$props2.isVerifyingEmailAddress,\n          colors = _this$props2.colors,\n          primaryColor = _this$props2.primaryColor,\n          secondaryColor = _this$props2.secondaryColor,\n          type = _this$props2.type,\n          defaultTheme = _this$props2.defaultTheme; // Events\n\n      var _this$props3 = this.props,\n          onClose = _this$props3.onClose,\n          onAddAvatarClick = _this$props3.onAddAvatarClick,\n          onChangeAvatarClick = _this$props3.onChangeAvatarClick,\n          onAddDisplayNameClick = _this$props3.onAddDisplayNameClick,\n          onChangeDisplayNameClick = _this$props3.onChangeDisplayNameClick,\n          onAddEmailAddressClick = _this$props3.onAddEmailAddressClick,\n          onVerifyEmailAddressClick = _this$props3.onVerifyEmailAddressClick,\n          onPrimaryColorChange = _this$props3.onPrimaryColorChange,\n          onSecondaryColorChange = _this$props3.onSecondaryColorChange,\n          onTypeChange = _this$props3.onTypeChange;\n      var selectedTab = this.state.selectedTab;\n      var hasDeviatedFromDefaultSettings = false;\n\n      if (defaultTheme) {\n        hasDeviatedFromDefaultSettings = primaryColor !== defaultTheme.primaryColor.name || secondaryColor !== defaultTheme.secondaryColor.name || type !== defaultTheme.type;\n      }\n\n      return React.createElement(Dialog, {\n        fullScreen: fullScreen,\n        open: open,\n        onClose: onClose,\n        onKeyPress: this.handleKeyPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Settings\"), React.createElement(Tabs, {\n        className: classes.tabs,\n        indicatorColor: \"primary\",\n        textColor: \"primary\",\n        onChange: this.changeTab,\n        value: selectedTab,\n        variant: \"fullWidth\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Tab, {\n        label: \"Account\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(Tab, {\n        label: \"Appearance\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(Hidden, {\n        only: \"xs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, selectedTab === 0 && React.createElement(AccountTab, {\n        user: user,\n        isPerformingAuthAction: isPerformingAuthAction,\n        isVerifyingEmailAddress: isVerifyingEmailAddress,\n        onAddAvatarClick: onAddAvatarClick,\n        onChangeAvatarClick: onChangeAvatarClick,\n        onAddDisplayNameClick: onAddDisplayNameClick,\n        onChangeDisplayNameClick: onChangeDisplayNameClick,\n        onAddEmailAddressClick: onAddEmailAddressClick,\n        onVerifyEmailAddressClick: onVerifyEmailAddressClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), selectedTab === 1 && React.createElement(AppearanceTab, {\n        colors: colors,\n        primaryColor: primaryColor,\n        secondaryColor: secondaryColor,\n        type: type,\n        onPrimaryColorChange: onPrimaryColorChange,\n        onSecondaryColorChange: onSecondaryColorChange,\n        onTypeChange: onTypeChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      })), React.createElement(Hidden, {\n        only: ['sm', 'md', 'lg', 'xl'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(SwipeableViews, {\n        index: selectedTab,\n        onChangeIndex: this.changeIndex,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(AccountTab, {\n        user: user,\n        isPerformingAuthAction: isPerformingAuthAction,\n        isVerifyingEmailAddress: isVerifyingEmailAddress,\n        onAddAvatarClick: onAddAvatarClick,\n        onChangeAvatarClick: onChangeAvatarClick,\n        onAddDisplayNameClick: onAddDisplayNameClick,\n        onChangeDisplayNameClick: onChangeDisplayNameClick,\n        onAddEmailAddressClick: onAddEmailAddressClick,\n        onVerifyEmailAddressClick: onVerifyEmailAddressClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(AppearanceTab, {\n        colors: colors,\n        primaryColor: primaryColor,\n        secondaryColor: secondaryColor,\n        type: type,\n        onPrimaryColorChange: onPrimaryColorChange,\n        onSecondaryColorChange: onSecondaryColorChange,\n        onTypeChange: onTypeChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })))), selectedTab === 1 && hasDeviatedFromDefaultSettings && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(Hidden, {\n        only: \"xs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        onClick: this.handleResetClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Reset\"))), React.createElement(Hidden, {\n        only: ['sm', 'md', 'lg', 'xl'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        color: \"primary\",\n        variant: \"outlined\",\n        onClick: this.handleResetClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Reset\"), React.createElement(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        onClick: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"OK\")))), (selectedTab !== 1 || !hasDeviatedFromDefaultSettings) && React.createElement(Hidden, {\n        only: ['sm', 'md', 'lg', 'xl'],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"Cancel\"), React.createElement(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        onClick: onClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"OK\"))));\n    }\n  }]);\n\n  return SettingsDialog;\n}(Component);\n\nSettingsDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n  fullScreen: PropTypes.bool,\n  open: PropTypes.bool.isRequired,\n  user: PropTypes.object.isRequired,\n  isPerformingAuthAction: PropTypes.bool.isRequired,\n  isVerifyingEmailAddress: PropTypes.bool.isRequired,\n  colors: PropTypes.array.isRequired,\n  primaryColor: PropTypes.string.isRequired,\n  secondaryColor: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onAddAvatarClick: PropTypes.func.isRequired,\n  onChangeAvatarClick: PropTypes.func.isRequired,\n  onAddDisplayNameClick: PropTypes.func.isRequired,\n  onChangeDisplayNameClick: PropTypes.func.isRequired,\n  onAddEmailAddressClick: PropTypes.func.isRequired,\n  onVerifyEmailAddressClick: PropTypes.func.isRequired,\n  onPrimaryColorChange: PropTypes.func.isRequired,\n  onSecondaryColorChange: PropTypes.func.isRequired,\n  onTypeChange: PropTypes.func.isRequired,\n  onResetClick: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(SettingsDialog);","map":{"version":3,"sources":["C:\\Users\\xlind\\Documents\\ASUFootballEquipment\\app\\src\\dialogs\\SettingsDialog\\SettingsDialog.js"],"names":["React","Component","PropTypes","withStyles","Dialog","DialogTitle","DialogContent","DialogActions","Tabs","Tab","Button","Hidden","SwipeableViews","AccountTab","AppearanceTab","styles","theme","tabs","marginBottom","spacing","SettingsDialog","props","handleKeyPress","event","key","altKey","ctrlKey","metaKey","shiftKey","onClose","changeTab","value","setState","selectedTab","changeIndex","index","handleResetClick","primaryColor","secondaryColor","type","defaultTheme","setTimeout","onResetClick","state","classes","fullScreen","open","user","isPerformingAuthAction","isVerifyingEmailAddress","colors","onAddAvatarClick","onChangeAvatarClick","onAddDisplayNameClick","onChangeDisplayNameClick","onAddEmailAddressClick","onVerifyEmailAddressClick","onPrimaryColorChange","onSecondaryColorChange","onTypeChange","hasDeviatedFromDefaultSettings","name","propTypes","object","isRequired","bool","array","string","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Button from '@material-ui/core/Button';\nimport Hidden from '@material-ui/core/Hidden';\n\nimport SwipeableViews from 'react-swipeable-views';\n\nimport AccountTab from '../../tabs/settings/AccountTab/AccountTab';\nimport AppearanceTab from '../../tabs/settings/AppearanceTab/AppearanceTab';\n\nconst styles = (theme) => ({\n  tabs: {\n    marginBottom: theme.spacing(1)\n  }\n});\n\nclass SettingsDialog extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedTab: 0\n    };\n  }\n\n  handleKeyPress = (event) => {\n    const key = event.key;\n\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n\n    if (key === 'Enter') {\n      this.props.onClose();\n    }\n  };\n\n  changeTab = (event, value) => {\n    this.setState({\n      selectedTab: value\n    });\n  };\n\n  changeIndex = (index) => {\n    this.setState({\n      selectedTab: index\n    });\n  };\n\n  handleResetClick = () => {\n    const { primaryColor, secondaryColor, type, defaultTheme } = this.props;\n\n    if (primaryColor !== defaultTheme.primaryColor || secondaryColor !== defaultTheme.secondaryColor || type !== defaultTheme.type) {\n      setTimeout(this.props.onResetClick, 137.5);\n    }\n  };\n\n  render() {\n    // Styling\n    const { classes } = this.props;\n\n    // Properties\n    const {\n      fullScreen,\n      open,\n      user,\n      isPerformingAuthAction,\n      isVerifyingEmailAddress,\n      colors,\n      primaryColor,\n      secondaryColor,\n      type,\n      defaultTheme\n    } = this.props;\n\n    // Events\n    const {\n      onClose,\n      onAddAvatarClick,\n      onChangeAvatarClick,\n      onAddDisplayNameClick,\n      onChangeDisplayNameClick,\n      onAddEmailAddressClick,\n      onVerifyEmailAddressClick,\n      onPrimaryColorChange,\n      onSecondaryColorChange,\n      onTypeChange\n    } = this.props;\n\n    const { selectedTab } = this.state;\n\n    let hasDeviatedFromDefaultSettings = false;\n\n    if (defaultTheme) {\n      hasDeviatedFromDefaultSettings = (\n        primaryColor !== defaultTheme.primaryColor.name ||\n        secondaryColor !== defaultTheme.secondaryColor.name ||\n        type !== defaultTheme.type\n      );\n    }\n\n    return (\n      <Dialog fullScreen={fullScreen} open={open} onClose={onClose} onKeyPress={this.handleKeyPress}>\n        <DialogTitle>Settings</DialogTitle>\n\n        <Tabs className={classes.tabs} indicatorColor=\"primary\" textColor=\"primary\" onChange={this.changeTab} value={selectedTab} variant=\"fullWidth\">\n          <Tab label=\"Account\" />\n          <Tab label=\"Appearance\" />\n        </Tabs>\n\n        <DialogContent>\n          <Hidden only=\"xs\">\n            {selectedTab === 0 &&\n              <AccountTab\n                user={user}\n                isPerformingAuthAction={isPerformingAuthAction}\n                isVerifyingEmailAddress={isVerifyingEmailAddress}\n                onAddAvatarClick={onAddAvatarClick}\n                onChangeAvatarClick={onChangeAvatarClick}\n                onAddDisplayNameClick={onAddDisplayNameClick}\n                onChangeDisplayNameClick={onChangeDisplayNameClick}\n                onAddEmailAddressClick={onAddEmailAddressClick}\n                onVerifyEmailAddressClick={onVerifyEmailAddressClick}\n              />\n            }\n\n            {selectedTab === 1 &&\n              <AppearanceTab\n                colors={colors}\n                primaryColor={primaryColor}\n                secondaryColor={secondaryColor}\n                type={type}\n                onPrimaryColorChange={onPrimaryColorChange}\n                onSecondaryColorChange={onSecondaryColorChange}\n                onTypeChange={onTypeChange}\n              />\n            }\n          </Hidden>\n\n          <Hidden only={['sm', 'md', 'lg', 'xl']}>\n            <SwipeableViews index={selectedTab} onChangeIndex={this.changeIndex}>\n              <AccountTab\n                user={user}\n                isPerformingAuthAction={isPerformingAuthAction}\n                isVerifyingEmailAddress={isVerifyingEmailAddress}\n                onAddAvatarClick={onAddAvatarClick}\n                onChangeAvatarClick={onChangeAvatarClick}\n                onAddDisplayNameClick={onAddDisplayNameClick}\n                onChangeDisplayNameClick={onChangeDisplayNameClick}\n                onAddEmailAddressClick={onAddEmailAddressClick}\n                onVerifyEmailAddressClick={onVerifyEmailAddressClick}\n              />\n\n              <AppearanceTab\n                colors={colors}\n                primaryColor={primaryColor}\n                secondaryColor={secondaryColor}\n                type={type}\n                onPrimaryColorChange={onPrimaryColorChange}\n                onSecondaryColorChange={onSecondaryColorChange}\n                onTypeChange={onTypeChange}\n              />\n            </SwipeableViews>\n          </Hidden>\n        </DialogContent>\n\n        {(selectedTab === 1 && hasDeviatedFromDefaultSettings) &&\n          <React.Fragment>\n            <Hidden only=\"xs\">\n              <DialogActions>\n                <Button color=\"primary\" variant=\"contained\" onClick={this.handleResetClick}>Reset</Button>\n              </DialogActions>\n            </Hidden>\n\n            <Hidden only={['sm', 'md', 'lg', 'xl']}>\n              <DialogActions>\n                <Button color=\"primary\" onClick={onClose}>Cancel</Button>\n                <Button color=\"primary\" variant=\"outlined\" onClick={this.handleResetClick}>Reset</Button>\n                <Button color=\"primary\" variant=\"contained\" onClick={onClose}>OK</Button>\n              </DialogActions>\n            </Hidden>\n          </React.Fragment>\n        }\n\n        {(selectedTab !== 1 || !hasDeviatedFromDefaultSettings) &&\n          <Hidden only={['sm', 'md', 'lg', 'xl']}>\n            <DialogActions>\n              <Button color=\"primary\" onClick={onClose}>Cancel</Button>\n              <Button color=\"primary\" variant=\"contained\" onClick={onClose}>OK</Button>\n            </DialogActions>\n          </Hidden>\n        }\n      </Dialog>\n    );\n  }\n}\n\nSettingsDialog.propTypes = {\n  classes: PropTypes.object.isRequired,\n\n  fullScreen: PropTypes.bool,\n  open: PropTypes.bool.isRequired,\n\n  user: PropTypes.object.isRequired,\n  isPerformingAuthAction: PropTypes.bool.isRequired,\n  isVerifyingEmailAddress: PropTypes.bool.isRequired,\n  colors: PropTypes.array.isRequired,\n  primaryColor: PropTypes.string.isRequired,\n  secondaryColor: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n\n  onClose: PropTypes.func.isRequired,\n  onAddAvatarClick: PropTypes.func.isRequired,\n  onChangeAvatarClick: PropTypes.func.isRequired,\n  onAddDisplayNameClick: PropTypes.func.isRequired,\n  onChangeDisplayNameClick: PropTypes.func.isRequired,\n  onAddEmailAddressClick: PropTypes.func.isRequired,\n  onVerifyEmailAddressClick: PropTypes.func.isRequired,\n  onPrimaryColorChange: PropTypes.func.isRequired,\n  onSecondaryColorChange: PropTypes.func.isRequired,\n  onTypeChange: PropTypes.func.isRequired,\n  onResetClick: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(SettingsDialog);"]},"metadata":{},"sourceType":"module"}